# Generated by Django 3.0.7 on 2020-09-06 21:13

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('events', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Giftaid',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=50, validators=[django.core.validators.RegexValidator(code='invalid campaign', message='Alpha only for name', regex='^[A-Za-z ]*$')])),
                ('first_line_address', models.CharField(blank=True, max_length=250, validators=[django.core.validators.RegexValidator(code='invalid first_line_address', message='Alphanumeric only for first_line_address', regex='^[0-9A-Za-z ]*$')])),
                ('city', models.CharField(max_length=100, validators=[django.core.validators.RegexValidator(code='invalid city', message='Alphanumeric only for city', regex='^[A-Za-z ]*$')])),
                ('postcode', models.CharField(max_length=8, validators=[django.core.validators.RegexValidator(code='invalid postcode', message='Capital Alphanumeric only for postcode', regex='^[0-9A-Z ]*$')])),
                ('country', models.CharField(max_length=100, validators=[django.core.validators.RegexValidator(code='invalid country', message='Alphanumeric only for country', regex='^[A-Za-z ]*$')])),
                ('phone_number', models.CharField(max_length=17, validators=[django.core.validators.RegexValidator(code='invalid event in phone_number', message='Phone number must be digits only, up to 15 digits allowed', regex='^\\+?1?\\d{9,15}$')])),
                ('slug', models.SlugField(default=None, editable=False, unique=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Merchandise',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('merchandise_name', models.CharField(max_length=100, validators=[django.core.validators.RegexValidator(code='invalid merchandise_name', message='Alphanumeric only for merchandise name', regex='^[0-9A-Za-z ]*$')])),
                ('stock_number', models.CharField(max_length=10, validators=[django.core.validators.RegexValidator(code='invalid stock_number', message='Alphanumeric only stock_number', regex='^[0-9A-Z]*$')])),
                ('merchandise_description', models.CharField(blank=True, max_length=250, validators=[django.core.validators.RegexValidator(code='invalid merchandise_description', message='Alphanumeric only merchandise_description', regex='^[0-9A-Za-z ]*$')])),
                ('price', models.DecimalField(decimal_places=2, max_digits=6)),
                ('merchandise_quantity', models.IntegerField(default=1)),
                ('slug', models.SlugField(default=None, editable=False, max_length=100, unique=True)),
            ],
            options={
                'ordering': ['merchandise_name'],
            },
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.DecimalField(decimal_places=2, max_digits=6)),
                ('ticket_type', models.CharField(choices=[(1, 'Adult aged 16 - 65'), (2, 'Child aged 3 - 15'), (3, 'Up to 2 Adults, 2 - 3 children'), (4, 'Over 65'), (5, 'Over 16, under 25 and in full time education')], default=1, max_length=12)),
                ('ticket_quantity', models.IntegerField(default=1)),
                ('slug', models.SlugField(default=None, editable=False, max_length=80, unique=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='events.Event')),
            ],
            options={
                'ordering': ['ticket_type'],
            },
        ),
        migrations.CreateModel(
            name='Donation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('campaign', models.CharField(max_length=100, validators=[django.core.validators.RegexValidator(code='invalid campaign', message='Alphanumeric only for campaign', regex='^[0-9A-Za-z ]*$')])),
                ('target', models.DecimalField(decimal_places=2, max_digits=6)),
                ('amount_2_donate', models.DecimalField(decimal_places=2, max_digits=6)),
                ('giftaid', models.BooleanField(default=False)),
                ('donation_quantity', models.IntegerField(default=1)),
                ('slug', models.SlugField(default=None, editable=False, max_length=200, unique=True)),
                ('giftaid_detail', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='finance.Giftaid')),
            ],
            options={
                'ordering': ['campaign'],
            },
        ),
        migrations.CreateModel(
            name='Basket',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('basket_id', models.CharField(default='XXXXXXX', max_length=10, validators=[django.core.validators.RegexValidator(code='invalid basket_id', message='Alphanumeric only basket_it', regex='^[0-9A-Z]*$')])),
                ('date', models.DateTimeField(default=django.utils.timezone.now)),
                ('paid', models.BooleanField(default=False)),
                ('total_cost', models.DecimalField(decimal_places=2, default=0, max_digits=6)),
                ('slug', models.SlugField(default=None, editable=False, max_length=10, unique=True)),
                ('donation', models.ManyToManyField(to='finance.Donation')),
                ('merchandise', models.ManyToManyField(to='finance.Merchandise')),
                ('ticket', models.ManyToManyField(to='finance.Ticket')),
            ],
        ),
    ]
